#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 1024
#define MAX_ARGUMENTS 64

void execute_command(char* command);

int main(int argc, char* argv[]) {
    if (argc == 2) {
        FILE* fp = fopen(argv[1], "r");
        if (fp == NULL) {
            printf("Error: Unable to open file\n");
            exit(1);
        }

        char command[MAX_COMMAND_LENGTH];
        while (fgets(command, MAX_COMMAND_LENGTH, fp) != NULL) {
            if (command[strlen(command) - 1] == '\n') {
                command[strlen(command) - 1] = '\0';
            }
            execute_command(command);
        }

        fclose(fp);
        return 0;
    } else if (argc > 2) {
        printf("Usage: %s [filename]\n", argv[0]);
        exit(1);
    }

    while (1) {
        printf("$ ");
        fflush(stdout);

        char command[MAX_COMMAND_LENGTH];
        if (fgets(command, MAX_COMMAND_LENGTH, stdin) == NULL) {
            break;
        }

        if (command[strlen(command) - 1] == '\n') {
            command[strlen(command) - 1] = '\0';
        }

        execute_command(command);
    }

    return 0;
}

void execute_command(char* command) {
    char* arguments[MAX_ARGUMENTS];

    char* token = strtok(command, " ");
    int i = 0;
    while (token != NULL) {
        arguments[i] = token;
        i++;
        token = strtok(NULL, " ");
    }
    arguments[i] = NULL;

    pid_t pid = fork();
    if (pid == -1) {
        printf("Error: Fork failed\n");
    } else if (pid == 0) {
        execvp(arguments[0], arguments);
        printf("Error: Command not found\n");
        exit(1);
    } else {
        int status;
        waitpid(pid, &status, 0);
    }
}

